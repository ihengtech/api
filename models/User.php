<?php

namespace app\models;

use Yii;
use yii\web\IdentityInterface;
use yii\filters\RateLimitInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id ID
 * @property string $username 登录用户名
 * @property string $avatar_url 头像地址
 * @property string $password_hash 密码
 * @property string $auth_key AUTH KEY
 * @property string $access_token TOKEN
 * @property string $password_reset_token RESET TOKEN
 * @property string $access_token_expired_at TOKEN EXPIRED AT
 * @property string $email 电子邮箱
 * @property string $mobile_phone 移动电话
 * @property string $raw_role 原始角色
 * @property int $status 状态
 * @property int $allowance ALLOWANCE
 * @property int $allowance_updated_at ALLOWANCE UPDATED AT
 * @property int $rate_limit RATE LIMIT
 * @property string $last_login_at 最后登录时间
 * @property string $created_at 创建时间
 * @property string $updated_at 更新时间
 */
class User extends \yii\db\ActiveRecord implements IdentityInterface, RateLimitInterface
{

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username', 'password_hash'], 'required'],
            [['access_token_expired_at', 'last_login_at', 'created_at', 'updated_at'], 'safe'],
            [['status', 'allowance', 'allowance_updated_at'], 'integer'],
            [['username', 'password_hash', 'access_token', 'password_reset_token', 'email', 'raw_role', 'auth_key', 'rate_limit'], 'string', 'max' => 255],
            [['avatar_url'], 'string', 'max' => 2873],
            [['mobile_phone'], 'string', 'max' => 20],
            [['username'], 'unique'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'username' => Yii::t('app', '登录用户名'),
            'avatar_url' => Yii::t('app', '头像地址'),
            'password_hash' => Yii::t('app', '密码'),
            'auth_key' => Yii::t('app', 'AUTH KEY'),
            'access_token' => Yii::t('app', 'TOKEN'),
            'password_reset_token' => Yii::t('app', 'RESET TOKEN'),
            'access_token_expired_at' => Yii::t('app', 'TOKEN EXPIRED AT'),
            'email' => Yii::t('app', '电子邮箱'),
            'mobile_phone' => Yii::t('app', '移动电话'),
            'raw_role' => Yii::t('app', '原始角色'),
            'status' => Yii::t('app', '状态'),
            'allowance' => Yii::t('app', 'ALLOWANCE'),
            'allowance_updated_at' => Yii::t('app', 'ALLOWANCE UPDATED AT'),
            'rate_limit' => Yii::t('app', 'RATE LIMIT'),
            'last_login_at' => Yii::t('app', '最后登录时间'),
            'created_at' => Yii::t('app', '创建时间'),
            'updated_at' => Yii::t('app', '更新时间'),
        ];
    }

    /**
     * {@inheritdoc}
     * @return UserQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new UserQuery(get_called_class());
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentity($id)
    {
        return null;
    }

    /**
     * {@inheritdoc}
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return User::find()->where(['access_token' => $token])->one();
    }

    /**
     * Finds user by username
     *
     * @param string $username
     * @return static|null
     */
    public static function findByUsername($username)
    {
        return null;
    }

    /**
     * {@inheritdoc}
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * {@inheritdoc}
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * {@inheritdoc}
     */
    public function validateAuthKey($authKey)
    {
        return $this->auth_key === $authKey;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return $this->password === $password;
    }

    public function fields()
    {
        return [
            'id',
            'username',
            'avatar_url',
            'email',
            'mobile_phone',
            'raw_role',
            'status',
            'created_at',
            'last_login_at',
        ];
        //return parent::fields(); // TODO: Change the autogenerated stub
    }

    /**
     * Returns the maximum number of allowed requests and the window size.
     * @param \yii\web\Request $request the current request
     * @param \yii\base\Action $action the action to be executed
     * @return array an array of two elements. The first element is the maximum number of allowed requests,
     * and the second element is the size of the window in seconds.
     */
    public function getRateLimit($request, $action)
    {
        return [$this->rate_limit, 1]; // $rateLimit requests per second
    }

    /**
     * Loads the number of allowed requests and the corresponding timestamp from a persistent storage.
     * @param \yii\web\Request $request the current request
     * @param \yii\base\Action $action the action to be executed
     * @return array an array of two elements. The first element is the number of allowed requests,
     * and the second element is the corresponding UNIX timestamp.
     */
    public function loadAllowance($request, $action)
    {
        return [$this->allowance, $this->allowance_updated_at];
    }

    /**
     * Saves the number of allowed requests and the corresponding timestamp to a persistent storage.
     * @param \yii\web\Request $request the current request
     * @param \yii\base\Action $action the action to be executed
     * @param int $allowance the number of allowed requests remaining.
     * @param int $timestamp the current timestamp.
     */
    public function saveAllowance($request, $action, $allowance, $timestamp)
    {
        $this->allowance = $allowance;
        $this->allowance_updated_at = $timestamp;
        $this->save();
    }
}
