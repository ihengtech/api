<?php

namespace app\controllers;

use Yii;
use app\models\FileManage;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\rest\ActiveController;
use yii\web\ServerErrorHttpException;
use yii\web\UploadedFile;

class FileManageController extends ActiveController
{
    public $modelClass = 'app\models\FileManage';
    public $serializer = [
        'class' => 'yii\rest\Serializer',
        'collectionEnvelope' => 'items',
    ];

    /**
     * @throws \yii\base\InvalidConfigException
     */
    public function init()
    {
        parent::init();
        \Yii::$app->user->enableSession = false;
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => CompositeAuth::className(),
            'authMethods' => [
                HttpBasicAuth::className(),
                HttpBearerAuth::className(),
                QueryParamAuth::className(),
            ],
        ];
        //$behaviors['rateLimiter']['enableRateLimitHeaders'] = false;
        return $behaviors;
    }

    public function actions()
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['create']);
        return $actions;
    }

    /**
     * @return FileManage
     * @throws ServerErrorHttpException
     */
    public function actionCreate()
    {
        $model = new FileManage();
        $model->raw_name = UploadedFile::getInstanceByName('raw_name');
        if (!$model->validate()) {
            return $model;
        }
        $fileObject = $model->raw_name;
        $model->setDefaultField();
        $model->raw_name = $fileObject->getBaseName();
        $model->unique_name = $model->getUniqueName($fileObject->tempName, $fileObject->getExtension());
        $savePath = Yii::getAlias('@fileManage') . DIRECTORY_SEPARATOR . $model->unique_name;
        if ($fileObject->saveAs($savePath) && $model->save(false)) {
            return $model;
        } elseif (!$model->hasErrors()) {
            throw new ServerErrorHttpException('Failed to create the object for unknown reason.');
        }
        return $model;
    }

    public function checkAccess($action, $model = null, $params = [])
    {
        parent::checkAccess($action, $model, $params); // TODO: Change the autogenerated stub
    }
}